package com.example.lita.facturare.cyberfactura.controller;

import com.example.lita.facturare.cyberfactura.models.entity.Bill;
import com.example.lita.facturare.cyberfactura.models.entity.SoldItem;
import com.example.lita.facturare.cyberfactura.models.entity.User;
import com.example.lita.facturare.cyberfactura.repository.BillRepository;
import com.example.lita.facturare.cyberfactura.repository.SoldItemRepository;
import com.example.lita.facturare.cyberfactura.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @Autowired
    private BillRepository billRepository;

    @Autowired
    private SoldItemRepository soldItemRepository;

    @PostMapping(path="/add") // Map ONLY POST Requests
    public @ResponseBody String addNewBill (@RequestParam String client
            , @RequestParam String issuer) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Bill bill = new Bill();

        bill.setClient(client);
        bill.setIssuer(issuer);
        billRepository.save(bill);
        return "Saved";
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

    @GetMapping(path="/items")
    public @ResponseBody Iterable<SoldItem> getAllSoldItems() {
        return billRepository
                .findById(1)
                .get()
                .getSoldItem();
    }
}